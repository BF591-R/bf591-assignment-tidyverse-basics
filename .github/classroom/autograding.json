{
  "tests": [
    {
      "name": "read_expression_table(): created a tibble, not dataframe",
      "setup": "",
      "run": "awk -F ',' '$1 == 1 { print $2; exit}' test_results.csv",
      "input": "",
      "output": "success",
      "comparison": "exact",
      "timeout": 10,
      "points": 1
    },
    {
      "name": "read_expression_table(): created a new column named subject_id in the dataframe",
      "setup": "",
      "run": "awk -F ',' '$1 == 2 { print $2; exit}' test_results.csv",
      "input": "",
      "output": "success",
      "comparison": "exact",
      "timeout": 10,
      "points": 1
    },
    {
      "name": "read_expression_table(): returns a tibble with 35 rows and 1001 columns",
      "setup": "",
      "run": "awk -F ',' '$1 == 3 { print $2; exit}' test_results.csv",
      "input": "",
      "output": "success",
      "comparison": "exact",
      "timeout": 10,
      "points": 1
    },
    {
      "name": "load_metadata(): returns the metadata as a tibble",
      "setup": "",
      "run": "awk -F ',' '$1 == 4 { print $2; exit}' test_results.csv",
      "input": "",
      "output": "success",
      "comparison": "exact",
      "timeout": 10,
      "points": 1
    },
    {
      "name": "load_metadata(): returns a tibble with exactly 134 rows, and 75 columns",
      "setup": "",
      "run": "awk -F ',' '$1 == 5 { print $2; exit}' test_results.csv",
      "input": "",
      "output": "success",
      "comparison": "exact",
      "timeout": 10,
      "points": 1
    },
    {
      "name": "period_to_underscore(): does not return a string with only the first instance replaced",
      "setup": "",
      "run": "awk -F ',' '$1 == 6 { print $2; exit}' test_results.csv",
      "input": "",
      "output": "success",
      "comparison": "exact",
      "timeout": 10,
      "points": 1
    },
    {
      "name": "period_to_underscore(): returns a string with all periods replaced by underscores",
      "setup": "",
      "run": "awk -F ',' '$1 == 7 { print $2; exit}' test_results.csv",
      "input": "",
      "output": "success",
      "comparison": "exact",
      "timeout": 10,
      "points": 1
    },
    {
      "name": "rename_and_select(): returns the same column names as specified",
      "setup": "",
      "run": "awk -F ',' '$1 == 8 { print $2; exit}' test_results.csv",
      "input": "",
      "output": "success",
      "comparison": "exact",
      "timeout": 10,
      "points": 1
    },
    {
      "name": "stage_as_factor(): returns a new column called Stage",
      "setup": "",
      "run": "awk -F ',' '$1 == 9 { print $2; exit}' test_results.csv",
      "input": "",
      "output": "success",
      "comparison": "exact",
      "timeout": 10,
      "points": 1
    },
    {
      "name": "stage_as_factor(): converted the values of Stage to factors",
      "setup": "",
      "run": "awk -F ',' '$1 == 10 { print $2; exit}' test_results.csv",
      "input": "",
      "output": "success",
      "comparison": "exact",
      "timeout": 10,
      "points": 1
    },
    {
      "name": "mean_age_by_sex(): correctly returns the average age for M",
      "setup": "",
      "run": "awk -F ',' '$1 == 11 { print $2; exit}' test_results.csv",
      "input": "",
      "output": "success",
      "comparison": "exact",
      "timeout": 10,
      "points": 1
    },
    {
      "name": "mean_age_by_sex(): correctly returns the average age for F",
      "setup": "",
      "run": "awk -F ',' '$1 == 12 { print $2; exit}' test_results.csv",
      "input": "",
      "output": "success",
      "comparison": "exact",
      "timeout": 10,
      "points": 1
    },
    {
      "name": "age_by_stage(): returns a tibble",
      "setup": "",
      "run": "awk -F ',' '$1 == 13 { print $2; exit}' test_results.csv",
      "input": "",
      "output": "success",
      "comparison": "exact",
      "timeout": 10,
      "points": 1
    },
    {
      "name": "age_by_stage(): correctly returns the right columns",
      "setup": "",
      "run": "awk -F ',' '$1 == 14 { print $2; exit}' test_results.csv",
      "input": "",
      "output": "success",
      "comparison": "exact",
      "timeout": 10,
      "points": 1
    },
    {
      "name": "age_by_stage(): returns the correct values for average age",
      "setup": "",
      "run": "awk -F ',' '$1 == 15 { print $2; exit}' test_results.csv",
      "input": "",
      "output": "success",
      "comparison": "exact",
      "timeout": 10,
      "points": 1
    },
    {
      "name": "subtype_stage_cross_tab(): should not retun any NA values",
      "setup": "",
      "run": "awk -F ',' '$1 == 16 { print $2; exit}' test_results.csv",
      "input": "",
      "output": "success",
      "comparison": "exact",
      "timeout": 10,
      "points": 1
    },
    {
      "name": "subtype_stage_cross_tab(): should return Stage as a column",
      "setup": "",
      "run": "awk -F ',' '$1 == 17 { print $2; exit}' test_results.csv",
      "input": "",
      "output": "success",
      "comparison": "exact",
      "timeout": 10,
      "points": 1
    },
    {
      "name": "subtype_stage_cross_tab(): should match the expected results based on the test crosstab",
      "setup": "",
      "run": "awk -F ',' '$1 == 18 { print $2; exit}' test_results.csv",
      "input": "",
      "output": "success",
      "comparison": "exact",
      "timeout": 10,
      "points": 1
    },
    {
      "name": "summarize_expression(): should return the proper variance values from the test tibble",
      "setup": "",
      "run": "awk -F ',' '$1 == 19 { print $2; exit}' test_results.csv",
      "input": "",
      "output": "success",
      "comparison": "exact",
      "timeout": 10,
      "points": 1
    },
    {
      "name": "summarize_expression(): should return the proper mean values from the test tibble",
      "setup": "",
      "run": "awk -F ',' '$1 == 20 { print $2; exit}' test_results.csv",
      "input": "",
      "output": "success",
      "comparison": "exact",
      "timeout": 10,
      "points": 1
    }
  ]
}